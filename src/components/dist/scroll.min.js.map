{"version":3,"sources":["scroll.js"],"names":["_react","_interopRequireWildcard","require","ScrollAnimation","element","scrollElements","forEach","el","dividend","arguments","length","undefined","getBoundingClientRect","top","window","innerHeight","document","documentElement","clientHeight","elementInView","classList","remove","hideScrollElement","add","querySelectorAll","displayScrollElement","addEventListener","elementOutofView","handleScrollAnimation","removeEventListener"],"mappings":"4UACA,IAAAA,OAAAC,wBAAAC,QAAA,ynBAEA,SAASC,kBAqBiB,SAAtBC,IADFC,EAAAC,QAAA,SAAAC,IAjBsB,SAACA,EAAD,GAAsB,IAAjBC,EAAiB,EAAAC,UAAAC,aAAAC,IAAtB,EAAA,EAAgB,EALxC,OAMuBJ,EAAGK,wBAAwBC,MAI3CC,OAAOC,aAAeC,SAASC,gBAAgBC,cAAgBV,EAsB5DW,CAAcZ,EAAI,MAjC5B,SAAAA,GAkBI,OAfKJ,EAATS,wBAA2BC,KAGNC,OAAGC,aAAhBI,SAAsCF,gBAAAC,cAsBlCE,CAAiBb,IATTO,SAAAA,GAJlBV,EAAAgB,UAAAC,OAAA,YAYAC,CAAAf,GArBA,SAAAH,GAkBEA,EAAQgB,UAAUG,IAAI,YAGlBD,CAAoBf,KAvB1B,IAAMF,EAAiBW,SAASQ,iBAAiB,cA8CjD,OAhBMC,EAAAA,OAAAA,WAAAA,WAIH,OAHEX,OAFDY,iBAEWC,SAAJC,GAHT,WADFd,OAAAe,oBAAA,SAAAD,KAUA,IASO,kBALLzB","file":"scroll.min.js","sourcesContent":["// components/ScrollAnimation.js\r\nimport React, { useEffect } from 'react';\r\n\r\nfunction ScrollAnimation() {\r\n  const scrollElements = document.querySelectorAll('.js-scroll');\r\n\r\n  const elementInView = (el, dividend = 1) => {\r\n    const elementTop = el.getBoundingClientRect().top;\r\n\r\n    return (\r\n      elementTop <=\r\n      (window.innerHeight || document.documentElement.clientHeight) / dividend\r\n    );\r\n  };\r\n\r\n  const elementOutofView = (el) => {\r\n    const elementTop = el.getBoundingClientRect().top;\r\n\r\n    return (\r\n      elementTop > (window.innerHeight || document.documentElement.clientHeight)\r\n    );\r\n  };\r\n\r\n  const displayScrollElement = (element) => {\r\n    element.classList.add('scrolled');\r\n  };\r\n\r\n  const hideScrollElement = (element) => {\r\n    element.classList.remove('scrolled');\r\n  };\r\n\r\n  const handleScrollAnimation = () => {\r\n    scrollElements.forEach((el) => {\r\n      if (elementInView(el, 1.25)) {\r\n        displayScrollElement(el);\r\n      } else if (elementOutofView(el)) {\r\n        hideScrollElement(el);\r\n      }\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', handleScrollAnimation);\r\n\r\n    // Clean up event listener on component unmount\r\n    return () => {\r\n      window.removeEventListener('scroll', handleScrollAnimation);\r\n    };\r\n  }, []);\r\n\r\n  return null;\r\n}\r\n\r\nexport default ScrollAnimation;\r\n"]}